openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_findAll
      summary: Get all users
      description: Get all users
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags: &ref_0
        - User
    post:
      operationId: UserController_create
      summary: Create user
      description: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Body does not contain required fields
      tags: *ref_0
  /user/{userId}:
    get:
      operationId: UserController_findOne
      summary: Get single user by id
      description: Get single user by id
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User id is invalid (not uuid)
        '404':
          description: User not found
      tags: *ref_0
    put:
      operationId: UserController_update
      summary: Update a user's password
      description: Updates a user's password by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: The user has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User id is invalid (not uuid)
        '403':
          description: Old password is wrong
        '404':
          description: User not found
      tags: *ref_0
    delete:
      operationId: UserController_remove
      summary: Delete user
      description: Deletes user by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The user has been deleted
        '400':
          description: User id is invalid (not uuid)
        '404':
          description: User not found
      tags: *ref_0
  /track:
    get:
      operationId: TrackController_findAll
      summary: Get tracks list
      description: Gets all library tracks list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags: &ref_1
        - Track
    post:
      operationId: TrackController_create
      summary: Add new track
      description: Add new track information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Body does not contain required fields
      tags: *ref_1
  /track/{trackId}:
    get:
      operationId: TrackController_findOne
      summary: Get single track by id
      description: Get single track by id
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Track id is invalid (not uuid)
      tags: *ref_1
    put:
      operationId: TrackController_update
      summary: Update track information
      description: Update library track information by UUID
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Track id is invalid (not uuid)
      tags: *ref_1
    delete:
      operationId: TrackController_remove
      summary: Delete track
      description: Delete track from library
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Track id is invalid (not uuid)
        '404':
          description: Track was not found
      tags: *ref_1
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: Gets all favorites
      description: Gets all favorites movies, tracks and books
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteDto'
      tags: &ref_2
        - Favorites
  /favs/track/{trackId}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to the favorites
      description: Add track to the favorites
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Track id is invalid (not uuid)
        '422':
          description: Track with id doesn't exist
      tags: *ref_2
    delete:
      operationId: FavoritesController_removeTrack
      summary: Delete track from favorites
      description: Delete track from favorites
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Track id is invalid (not uuid)
        '404':
          description: Track was not found
      tags: *ref_2
  /favs/artist/{artistId}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to the favorites
      description: Add artist to the favorites
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Artist id is invalid (not uuid)
        '422':
          description: Artist with id doesn't exist
      tags: *ref_2
    delete:
      operationId: FavoritesController_removeArtist
      summary: Delete artist from favorites
      description: Delete artist from favorites
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Artist id is invalid (not uuid)
        '404':
          description: Artist was not found
      tags: *ref_2
  /favs/album/{albumId}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to the favorites
      description: Add album to the favorites
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Album id is invalid (not uuid)
        '422':
          description: Album with id doesn't exist
      tags: *ref_2
    delete:
      operationId: FavoritesController_removeAlbum
      summary: Delete album from favorites
      description: Delete album from favorites
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Album id is invalid (not uuid)
        '404':
          description: Album was not found
      tags: *ref_2
  /artist:
    get:
      operationId: ArtistController_findAll
      summary: Gets all artists
      description: Gets all artists
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags: &ref_3
        - Artist
    post:
      operationId: ArtistController_create
      summary: Add new artist
      description: Add new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Body does not contain required fields
      tags: *ref_3
  /artist/{artistId}:
    get:
      operationId: ArtistController_findOne
      summary: Get single artist by id
      description: Get single artist by id
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Artist id is invalid (not uuid)
      tags: *ref_3
    put:
      operationId: ArtistController_update
      summary: Update artist information
      description: Update library artist information by UUID
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Artist id is invalid (not uuid)
      tags: *ref_3
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      description: Delete artist from library
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Artist id is invalid (not uuid)
        '404':
          description: Artist was not found
      tags: *ref_3
  /album:
    get:
      operationId: AlbumController_findAll
      summary: Get albums list
      description: Gets all library albums list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags: &ref_4
        - Album
    post:
      operationId: AlbumController_create
      summary: Add new album
      description: Add new album information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Body does not contain required fields
      tags: *ref_4
  /album/{albumId}:
    get:
      operationId: AlbumController_findOne
      summary: Get single album by id
      description: Gets single album by id
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Album id is invalid (not uuid)
        '404':
          description: Album was not found
      tags: *ref_4
    put:
      operationId: AlbumController_update
      summary: Update album information
      description: Update library album information by UUID
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Album id is invalid (not uuid)
        '404':
          description: Album was not found
      tags: *ref_4
    delete:
      operationId: AlbumController_remove
      summary: Delete album
      description: Delete album from library
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Album id is invalid (not uuid)
        '404':
          description: Album was not found
      tags: *ref_4
info:
  title: Home Library Service
  description: Home music library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: TestUser
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: The user's login
        password:
          type: string
          description: The user's password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The user's old password
        newPassword:
          type: string
          description: The user's new password
      required:
        - oldPassword
        - newPassword
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          example: 262
          description: In seconds
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    FavoriteDto:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: integer
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: integer
        artistId:
          type: string
          format: uuid
          nullable: true